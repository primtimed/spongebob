//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/brian/Movement/PlayerControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlls"",
    ""maps"": [
        {
            ""name"": ""Deafult Movement"",
            ""id"": ""1002f397-98b9-48fe-87ba-12fbb4d6b2ac"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a8603a35-608f-458f-a93a-10414996f1f1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""140e4e71-3f29-4f12-bfc8-277d6b7bd5d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fecf2d47-8106-4b39-97f5-2e929f8f327d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Lock"",
                    ""type"": ""Button"",
                    ""id"": ""21b3016b-d0e0-4e73-b412-85bf8697bc18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""2658aaab-ac71-472d-9a21-21a44a725fc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""a1b190c0-08d9-4aab-ab92-3df8ac4147ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""d2e5a2dc-5f22-4425-80cc-872c1b3156ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon1"",
                    ""type"": ""Button"",
                    ""id"": ""70f20ed2-ddfb-417e-9572-91f818c0608e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon2"",
                    ""type"": ""Button"",
                    ""id"": ""3aca4f6f-3770-4f77-a26b-19ac8cf6185a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""W,A,S,D"",
                    ""id"": ""3b3be98d-8f78-4a5e-89ef-401172faad37"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""48b3036f-1bad-47bf-87e7-139a118b48d2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b7aed4ce-65a4-4d5e-97cf-8534cfa015c6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a429453d-6152-458a-9451-6b42eedf280c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""8544fecb-d79a-4a73-8341-c01d4e89a4da"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""80f96fe2-e217-488f-bb81-fedfe7d40fd4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5d55db9-8a5f-49b4-a325-afe581ac6143"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aee8bb4-4b69-413e-8b4d-681a016319ad"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c844494b-0e84-4e1d-aff1-b13442944a05"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4f490b2-be59-42b8-9e78-ca27d9a984d9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""849589af-130d-414c-a60c-b99c04a1230b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1eda40bf-ce19-4e54-9c5d-9f2aabedfb20"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddcf0d5f-2e52-43bc-a342-5409fe76772c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Commands"",
            ""id"": ""993879c3-ecca-4683-9cbc-70fc8d8e309e"",
            ""actions"": [
                {
                    ""name"": ""TimeSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""d1b225aa-e0c9-430e-ac94-afd759e63afa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipWave"",
                    ""type"": ""Button"",
                    ""id"": ""c1b49f1f-4084-4394-8f8e-4e4a3f18efad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Damage"",
                    ""type"": ""Button"",
                    ""id"": ""7ed09bb2-160d-492c-b2cd-3fdf57cdaebe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimBot"",
                    ""type"": ""Button"",
                    ""id"": ""bdfb3297-919b-4ceb-89ce-c8f94768b7ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47b42c65-20c1-4d5b-9f7a-8e5d7b5333bd"",
                    ""path"": ""<Keyboard>/f10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TimeSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb155c5c-fa68-4173-837b-cfe2ac92623a"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipWave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""653a9a1b-835e-42bd-8a03-e5d57c13667a"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Damage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a034ecac-cd66-44d9-b2bc-196ea16e00e5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimBot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Deafult Movement
        m_DeafultMovement = asset.FindActionMap("Deafult Movement", throwIfNotFound: true);
        m_DeafultMovement_Movement = m_DeafultMovement.FindAction("Movement", throwIfNotFound: true);
        m_DeafultMovement_Rotation = m_DeafultMovement.FindAction("Rotation", throwIfNotFound: true);
        m_DeafultMovement_Jump = m_DeafultMovement.FindAction("Jump", throwIfNotFound: true);
        m_DeafultMovement_MouseLock = m_DeafultMovement.FindAction("Mouse Lock", throwIfNotFound: true);
        m_DeafultMovement_Shoot = m_DeafultMovement.FindAction("Shoot", throwIfNotFound: true);
        m_DeafultMovement_Reload = m_DeafultMovement.FindAction("Reload", throwIfNotFound: true);
        m_DeafultMovement_Esc = m_DeafultMovement.FindAction("Esc", throwIfNotFound: true);
        m_DeafultMovement_Weapon1 = m_DeafultMovement.FindAction("Weapon1", throwIfNotFound: true);
        m_DeafultMovement_Weapon2 = m_DeafultMovement.FindAction("Weapon2", throwIfNotFound: true);
        // Commands
        m_Commands = asset.FindActionMap("Commands", throwIfNotFound: true);
        m_Commands_TimeSwitch = m_Commands.FindAction("TimeSwitch", throwIfNotFound: true);
        m_Commands_SkipWave = m_Commands.FindAction("SkipWave", throwIfNotFound: true);
        m_Commands_Damage = m_Commands.FindAction("Damage", throwIfNotFound: true);
        m_Commands_AimBot = m_Commands.FindAction("AimBot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Deafult Movement
    private readonly InputActionMap m_DeafultMovement;
    private IDeafultMovementActions m_DeafultMovementActionsCallbackInterface;
    private readonly InputAction m_DeafultMovement_Movement;
    private readonly InputAction m_DeafultMovement_Rotation;
    private readonly InputAction m_DeafultMovement_Jump;
    private readonly InputAction m_DeafultMovement_MouseLock;
    private readonly InputAction m_DeafultMovement_Shoot;
    private readonly InputAction m_DeafultMovement_Reload;
    private readonly InputAction m_DeafultMovement_Esc;
    private readonly InputAction m_DeafultMovement_Weapon1;
    private readonly InputAction m_DeafultMovement_Weapon2;
    public struct DeafultMovementActions
    {
        private @PlayerControlls m_Wrapper;
        public DeafultMovementActions(@PlayerControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_DeafultMovement_Movement;
        public InputAction @Rotation => m_Wrapper.m_DeafultMovement_Rotation;
        public InputAction @Jump => m_Wrapper.m_DeafultMovement_Jump;
        public InputAction @MouseLock => m_Wrapper.m_DeafultMovement_MouseLock;
        public InputAction @Shoot => m_Wrapper.m_DeafultMovement_Shoot;
        public InputAction @Reload => m_Wrapper.m_DeafultMovement_Reload;
        public InputAction @Esc => m_Wrapper.m_DeafultMovement_Esc;
        public InputAction @Weapon1 => m_Wrapper.m_DeafultMovement_Weapon1;
        public InputAction @Weapon2 => m_Wrapper.m_DeafultMovement_Weapon2;
        public InputActionMap Get() { return m_Wrapper.m_DeafultMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeafultMovementActions set) { return set.Get(); }
        public void SetCallbacks(IDeafultMovementActions instance)
        {
            if (m_Wrapper.m_DeafultMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnRotation;
                @Jump.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnJump;
                @MouseLock.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnMouseLock;
                @MouseLock.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnMouseLock;
                @MouseLock.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnMouseLock;
                @Shoot.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnShoot;
                @Reload.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnReload;
                @Esc.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnEsc;
                @Esc.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnEsc;
                @Esc.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnEsc;
                @Weapon1.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnWeapon1;
                @Weapon1.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnWeapon1;
                @Weapon1.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnWeapon1;
                @Weapon2.started -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnWeapon2;
                @Weapon2.performed -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnWeapon2;
                @Weapon2.canceled -= m_Wrapper.m_DeafultMovementActionsCallbackInterface.OnWeapon2;
            }
            m_Wrapper.m_DeafultMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseLock.started += instance.OnMouseLock;
                @MouseLock.performed += instance.OnMouseLock;
                @MouseLock.canceled += instance.OnMouseLock;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Esc.started += instance.OnEsc;
                @Esc.performed += instance.OnEsc;
                @Esc.canceled += instance.OnEsc;
                @Weapon1.started += instance.OnWeapon1;
                @Weapon1.performed += instance.OnWeapon1;
                @Weapon1.canceled += instance.OnWeapon1;
                @Weapon2.started += instance.OnWeapon2;
                @Weapon2.performed += instance.OnWeapon2;
                @Weapon2.canceled += instance.OnWeapon2;
            }
        }
    }
    public DeafultMovementActions @DeafultMovement => new DeafultMovementActions(this);

    // Commands
    private readonly InputActionMap m_Commands;
    private ICommandsActions m_CommandsActionsCallbackInterface;
    private readonly InputAction m_Commands_TimeSwitch;
    private readonly InputAction m_Commands_SkipWave;
    private readonly InputAction m_Commands_Damage;
    private readonly InputAction m_Commands_AimBot;
    public struct CommandsActions
    {
        private @PlayerControlls m_Wrapper;
        public CommandsActions(@PlayerControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TimeSwitch => m_Wrapper.m_Commands_TimeSwitch;
        public InputAction @SkipWave => m_Wrapper.m_Commands_SkipWave;
        public InputAction @Damage => m_Wrapper.m_Commands_Damage;
        public InputAction @AimBot => m_Wrapper.m_Commands_AimBot;
        public InputActionMap Get() { return m_Wrapper.m_Commands; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommandsActions set) { return set.Get(); }
        public void SetCallbacks(ICommandsActions instance)
        {
            if (m_Wrapper.m_CommandsActionsCallbackInterface != null)
            {
                @TimeSwitch.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnTimeSwitch;
                @TimeSwitch.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnTimeSwitch;
                @TimeSwitch.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnTimeSwitch;
                @SkipWave.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSkipWave;
                @SkipWave.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSkipWave;
                @SkipWave.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSkipWave;
                @Damage.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnDamage;
                @Damage.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnDamage;
                @Damage.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnDamage;
                @AimBot.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnAimBot;
                @AimBot.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnAimBot;
                @AimBot.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnAimBot;
            }
            m_Wrapper.m_CommandsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TimeSwitch.started += instance.OnTimeSwitch;
                @TimeSwitch.performed += instance.OnTimeSwitch;
                @TimeSwitch.canceled += instance.OnTimeSwitch;
                @SkipWave.started += instance.OnSkipWave;
                @SkipWave.performed += instance.OnSkipWave;
                @SkipWave.canceled += instance.OnSkipWave;
                @Damage.started += instance.OnDamage;
                @Damage.performed += instance.OnDamage;
                @Damage.canceled += instance.OnDamage;
                @AimBot.started += instance.OnAimBot;
                @AimBot.performed += instance.OnAimBot;
                @AimBot.canceled += instance.OnAimBot;
            }
        }
    }
    public CommandsActions @Commands => new CommandsActions(this);
    public interface IDeafultMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseLock(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
        void OnWeapon1(InputAction.CallbackContext context);
        void OnWeapon2(InputAction.CallbackContext context);
    }
    public interface ICommandsActions
    {
        void OnTimeSwitch(InputAction.CallbackContext context);
        void OnSkipWave(InputAction.CallbackContext context);
        void OnDamage(InputAction.CallbackContext context);
        void OnAimBot(InputAction.CallbackContext context);
    }
}
